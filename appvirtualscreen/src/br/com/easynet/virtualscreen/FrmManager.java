/*
 * FrmManager.java
 *
 * Created on 19 de Outubro de 2007, 23:40
 */
package br.com.easynet.virtualscreen;

import appvirtualscreen.Main;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.Checkbox;
import java.awt.CheckboxMenuItem;
import java.awt.Choice;
//import java.awt.Desktop;
import java.awt.Dialog;
//import java.awt.Dialog.ModalExclusionType;
//import java.awt.Dialog.ModalityType;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Label;
import java.awt.List;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.MenuItem;
import java.awt.MouseInfo;
import java.awt.Panel;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.PopupMenu;
import java.awt.PrintJob;
import java.awt.ScrollPane;
import java.awt.Scrollbar;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.InvalidDnDOperationException;
import java.awt.im.InputMethodHighlight;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.FileInputStream;
import java.net.Socket;
import java.net.URL;
import java.util.Date;
import java.util.Map;
import java.util.Properties;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.Popup;

/**
 *
 * @author  famelix
 */
public class FrmManager extends javax.swing.JFrame {

    private Server server;
    private ServerGroup sg;
    private String PATH_CAPTURE_IMAGE = "captureimage";
    private int portFeedBack;
    private boolean dominateState = false;
    private DominateMouseThread dmt;
    private FrmConfigure frmConfig;
    private ImageClientThread ict;
    private BlockNetworkCliente bnc;

    /** Creates new form FrmManager */
    private void removeImagesCapture(File file) {
        try {
            // Excluindo imagens capturadas anteriormente
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    removeImagesCapture(files[i]);
                }
            }
            file.delete();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public FrmManager() {
        try {
            // Excluindo imagens capturadas anteriormente
            File file = new File(PATH_CAPTURE_IMAGE);
            removeImagesCapture(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        Toolkit tk = Toolkit.getDefaultToolkit();
        setSize(tk.getScreenSize());
        super.setTitle("Virtual Screen");
        //setSize(400,500);

        jplTop.setSize((int) tk.getScreenSize().getWidth(), 10);
//        ListMachineModel lmm = new ListMachineModel();

        // Motando lista vazia
        getJltMachine().setModel(new ListMachineModel());
        //getJltMachine().setSelectionMode(JList.M)
        JavaLocationRenderer jlr = new JavaLocationRenderer();
        getJltMachine().setCellRenderer(jlr);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        Image imgIcone = new ImageIcon(this.getClass().getResource("icone.png")).getImage();
        this.setIconImage(imgIcone);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jplTop = new javax.swing.JPanel();
        jtbTransmission = new javax.swing.JToggleButton();
        jtbObservation = new javax.swing.JToggleButton();
        jbtCaptureScreen = new javax.swing.JButton();
        jtbLigaDesligaRede = new javax.swing.JToggleButton();
        jtbDominate = new javax.swing.JToggleButton();
        jbtBlockClient = new javax.swing.JToggleButton();
        jbtTools = new javax.swing.JButton();
        jtbDesligarCliente = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jbtExit = new javax.swing.JButton();
        jbtnCloseFrmClient = new javax.swing.JButton();
        jspCenter = new javax.swing.JSplitPane();
        jplCenter = new javax.swing.JPanel();
        jtpClients = new javax.swing.JTabbedPane();
        jplLeft = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jltMachine = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmnTools = new javax.swing.JMenu();
        jmiTransmit = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jmiBlock = new javax.swing.JMenuItem();
        jmiConfigute = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VirtualScreen");
        setIconImages(null);

        jplTop.setBackground(new java.awt.Color(255, 255, 255));
        jplTop.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jplTop.setLayout(new javax.swing.BoxLayout(jplTop, javax.swing.BoxLayout.LINE_AXIS));

        jtbTransmission.setBackground(new java.awt.Color(255, 255, 255));
        jtbTransmission.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/connect_64.png"))); // NOI18N
        jtbTransmission.setToolTipText("Transmit All");
        jtbTransmission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbTransmissionActionPerformed(evt);
            }
        });
        jplTop.add(jtbTransmission);

        jtbObservation.setBackground(new java.awt.Color(255, 255, 255));
        jtbObservation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/xview_64.png"))); // NOI18N
        jtbObservation.setToolTipText("Observation");
        jtbObservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbObservationActionPerformed(evt);
            }
        });
        jplTop.add(jtbObservation);

        jbtCaptureScreen.setBackground(java.awt.Color.white);
        jbtCaptureScreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/immagini copy_64.png"))); // NOI18N
        jbtCaptureScreen.setToolTipText("Save Image");
        jbtCaptureScreen.setEnabled(false);
        jbtCaptureScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCaptureScreenActionPerformed(evt);
            }
        });
        jplTop.add(jbtCaptureScreen);

        jtbLigaDesligaRede.setBackground(java.awt.Color.white);
        jtbLigaDesligaRede.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/rede.png"))); // NOI18N
        jtbLigaDesligaRede.setToolTipText("Enable and Disable Network client.");
        jtbLigaDesligaRede.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbLigaDesligaRedeActionPerformed(evt);
            }
        });
        jplTop.add(jtbLigaDesligaRede);

        jtbDominate.setBackground(java.awt.Color.white);
        jtbDominate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/dominate.jpg"))); // NOI18N
        jtbDominate.setToolTipText("Dominate Client");
        jtbDominate.setEnabled(false);
        jtbDominate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbDominateActionPerformed(evt);
            }
        });
        jplTop.add(jtbDominate);
        jplTop.remove(jtbDominate);

        jbtBlockClient.setBackground(new java.awt.Color(255, 255, 255));
        jbtBlockClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/block_64.png"))); // NOI18N
        jbtBlockClient.setToolTipText("Block Client");
        jbtBlockClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBlockClientActionPerformed(evt);
            }
        });
        jplTop.add(jbtBlockClient);

        jbtTools.setBackground(new java.awt.Color(255, 255, 255));
        jbtTools.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/config_network_64.png"))); // NOI18N
        jbtTools.setToolTipText("Tools");
        jbtTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtToolsActionPerformed(evt);
            }
        });
        jplTop.add(jbtTools);

        jtbDesligarCliente.setBackground(java.awt.Color.white);
        jtbDesligarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/desligar.png"))); // NOI18N
        jtbDesligarCliente.setToolTipText("Shutdown All Clients.");
        jtbDesligarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbDesligarClienteActionPerformed(evt);
            }
        });
        jplTop.add(jtbDesligarCliente);

        jPanel1.setBackground(java.awt.Color.white);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jbtExit.setBackground(java.awt.Color.white);
        jbtExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/exit_64.png"))); // NOI18N
        jbtExit.setToolTipText("Exit");
        jbtExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExitActionPerformed(evt);
            }
        });
        jPanel1.add(jbtExit, java.awt.BorderLayout.LINE_END);

        jbtnCloseFrmClient.setBackground(new java.awt.Color(255, 255, 255));
        jbtnCloseFrmClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/close_screen_64.png"))); // NOI18N
        jbtnCloseFrmClient.setToolTipText("Close Frame Client");
        jbtnCloseFrmClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseFrmClientActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnCloseFrmClient, java.awt.BorderLayout.LINE_START);

        jplTop.add(jPanel1);

        getContentPane().add(jplTop, java.awt.BorderLayout.NORTH);

        jspCenter.setBackground(new java.awt.Color(255, 255, 255));

        jplCenter.setBackground(java.awt.Color.white);
        jplCenter.setLayout(new java.awt.BorderLayout());

        jtpClients.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jtpClients.setEnabled(false);
        jtpClients.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jtpClientsStateChanged(evt);
            }
        });
        jplCenter.add(jtpClients, java.awt.BorderLayout.CENTER);

        jspCenter.setRightComponent(jplCenter);

        jplLeft.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jplLeft.setLayout(new java.awt.BorderLayout());

        jltMachine.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltMachine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltMachineMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jltMachine);

        jplLeft.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jspCenter.setLeftComponent(jplLeft);

        getContentPane().add(jspCenter, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setText("File");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/exit_32.png"))); // NOI18N
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jmnTools.setText("Tools");

        jmiTransmit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/connect_32.png"))); // NOI18N
        jmiTransmit.setText("Transmission");
        jmiTransmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiTransmitActionPerformed(evt);
            }
        });
        jmnTools.add(jmiTransmit);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/xview_32.png"))); // NOI18N
        jMenuItem3.setText("Observation");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jmnTools.add(jMenuItem3);

        jmiBlock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/block_32.jpg"))); // NOI18N
        jmiBlock.setText("Block");
        jmiBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiBlockActionPerformed(evt);
            }
        });
        jmnTools.add(jmiBlock);

        jmiConfigute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/easynet/virtualscreen/config_network_32.png"))); // NOI18N
        jmiConfigute.setText("Configure");
        jmnTools.add(jmiConfigute);

        jMenuBar1.add(jmnTools);

        jMenu2.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
// TODO adicione seu c�digo de manipula��o aqui:
        FrmAbout frmAbout = new FrmAbout();
        frmAbout.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jltMachineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltMachineMouseClicked
// TODO adicione seu c�digo de manipula��o aqui:
        
        if (evt.getButton() == evt.BUTTON1) {
            System.out.println("Botao 1");
        } else if (evt.getButton() == evt.BUTTON2) {
            System.out.println("Botao 2");
        } else {
            System.out.println("Botao 3");
            Object[] mds = jltMachine.getSelectedValues();
            FrmPopup frmPopup = new FrmPopup(mds);
            PointerInfo pi = MouseInfo.getPointerInfo();
            Point p = pi.getLocation();
            p.setLocation((int) (p.getX() - 3), (int) (p.getY() - 3));

            frmPopup.setLocation(p);
            frmPopup.setResizable(false);
            frmPopup.setVisible(true);
        }
    }//GEN-LAST:event_jltMachineMouseClicked

    private void jbtCaptureScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCaptureScreenActionPerformed
// TODO adicione seu c�digo de manipula��o aqui:
        int index = jtpClients.getSelectedIndex();
        String ip = jtpClients.getTitleAt(index);

        JScrollPane jsp = (JScrollPane) jtpClients.getComponentAt(index);
        JViewport jvw = (JViewport) jsp.getComponent(0);
        JLabel display = (JLabel) jvw.getComponent(0);
        display.setText("");
        BufferedImage bi = (BufferedImage) ((ImageIcon) display.getIcon()).getImage();

        saveImage(ip, bi);
    }//GEN-LAST:event_jbtCaptureScreenActionPerformed

    private void saveImage(String ip, BufferedImage bi) {
        try {
            String path = PATH_CAPTURE_IMAGE + "/" + ip;
            File file = new File(path);
            // se a pasta nao existir ela � criada
            if (!file.exists()) {
                file.mkdirs();
            }
            Date dt = new Date(System.currentTimeMillis());
            ImageIO.write(bi, "JPG", new File(path + "/capture_" + dt.getTime() + ".jpg"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void stopObservation() {
        // Parando todas as abas
        jbtCaptureScreen.setEnabled(false);
        jtbObservation.setSelected(false);
        jtbDominate.setEnabled(false);

        // Removendo abas
        jplCenter.removeAll();
        repaint();
        stopObservationAllClients();
    }

    private void stopObservationAllClients() {
        try {
            System.gc();
            this.ict.setRun(false);
            ict = null;

        } catch (Exception e) {
        }
    }

    private void jtbObservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbObservationActionPerformed
// TODO adicione seu c�digo de manipula��o aqui:
        System.gc();
        if (jtbObservation.isSelected()) {
            if (ict == null) {
                ict = new ImageClientThread();
            }

            jspCenter.setDividerLocation(0);
            jbtCaptureScreen.setEnabled(true);
            jtbDominate.setEnabled(false);
            jtbTransmission.setSelected(false);
            if (getServer() != null) {
                getServer().setRun(false);
            }
            // Verificando se h� maquinas selecionada no list se nao houver mostra todas
            int total = jltMachine.getModel().getSize();

            //Object[] machines = jltMachine.getSelectedValues();
            java.util.List machines = ((ListMachineModel) jltMachine.getModel()).getMachines();
            jplCenter.removeAll();
            // criando nova lista de Tabbed
            jtpClients = new javax.swing.JTabbedPane();

            jtpClients.addChangeListener(new javax.swing.event.ChangeListener() {

                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    jtpClientsStateChanged(evt);
                }
            });
            jtpClients.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
            jplCenter.add(jtpClients, java.awt.BorderLayout.CENTER);

            for (int i = 0; i < machines.size(); i++) {
                MachineDefinition md = (MachineDefinition) machines.get(i);
                if (md.isPortAtive()) {
                    JLabel displayClient = new JLabel();
                    displayClient.setName(md.getIp());
                    JScrollPane jspDisplay = new JScrollPane();
                    jspDisplay.setViewportView(displayClient);

                    jtpClients.addTab(md.getIp(), jspDisplay);
                    // define o evento para pegar os clicks  do mouse do professor
                    displayClient.addMouseListener(new java.awt.event.MouseAdapter() {

                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            displayClientMouseClicked(evt);
                        }
                    });
                    // define o evento para pegar as coordenadas do mouse do professor
                    displayClient.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

                        public void mouseMoved(java.awt.event.MouseEvent evt) {
                            displayClientMouseMoved(evt);
                        }
                    });
                }
            }
        } else {
            //stopObservationAllClients();
            jspCenter.setDividerLocation(300);
            stopObservation();

        }
    }//GEN-LAST:event_jtbObservationActionPerformed

    private void displayClientMouseClicked(java.awt.event.MouseEvent evt) {
        if (dominateState) {
            if (dmt == null) {
                dmt = new DominateMouseThread();
                dmt.start();
            }
            dmt.setButton(evt.getButton());
            dmt.setCountClick(evt.getClickCount());
            JLabel label = (JLabel) evt.getSource();
            dmt.setNameSocket(label.getName());
        }
    }

    /**
     * Obtendo as coordenadas do mouse do professor
     * @param evt
     */
    private void displayClientMouseMoved(java.awt.event.MouseEvent evt) {
        // TODO add your handling cocde here:

        if (dominateState) {
            if (dmt == null) {
                dmt = new DominateMouseThread();
                dmt.start();
            }
            dmt.setX(evt.getX());
            dmt.setY(evt.getY());
            dmt.setDominateState(dominateState);
            JLabel label = (JLabel) evt.getSource();
            dmt.setNameSocket(label.getName());
        }
    }

    /**
     *Inicia ou para a transmissao
     */
    private void jtbTransmissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbTransmissionActionPerformed
// TODO adicione seu c�digo de manipula��o aqui:
        try {
            System.gc();

            // Parando a obervacao
            // Disselecionando o botao
            stopObservation();
            if (jtbTransmission.isSelected()) {
                // Iniciando a transmissao
                getServer().setRun(true);
                getServer().setTransmissionPrivate(false);
                this.setState(JFrame.ICONIFIED);

            // Parando todas as abas

            } else {
                // parando a transmisssao
                getServer().setTransmissionPrivate(false);
                getServer().setRun(false);
            }
        } catch (Exception e) {
            //e.printStackTrace();
        }

    }//GEN-LAST:event_jtbTransmissionActionPerformed

    private void jtbDominateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbDominateActionPerformed
        // TODO add your handling code here:
        dominateState = !dominateState;
        if (dmt != null) {
            dmt.setDominateState(dominateState);
        }
    }//GEN-LAST:event_jtbDominateActionPerformed

    private void jmiTransmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiTransmitActionPerformed
        // TODO add your handling code here:
        jtbTransmission.setSelected(!jtbTransmission.isSelected());
        jtbTransmissionActionPerformed(evt);
    }//GEN-LAST:event_jmiTransmitActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jtbObservation.setSelected(!jtbObservation.isSelected());
        jtbObservationActionPerformed(evt);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jbtToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtToolsActionPerformed
        // TODO add your handling code here:
        if (frmConfig == null) {
            frmConfig = new FrmConfigure();
        }
        frmConfig.setVisible(true);
    }//GEN-LAST:event_jbtToolsActionPerformed

    private void jbtExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jbtExitActionPerformed

    private void jtpClientsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jtpClientsStateChanged
        System.out.println("teste");
        // TODO adicione seu c�digo de manipula��o aqui:
        int index = jtpClients.getSelectedIndex();
        String ip = jtpClients.getTitleAt(index);

        JScrollPane jsp = (JScrollPane) jtpClients.getComponentAt(index);
        JViewport jvw = (JViewport) jsp.getComponent(0);
        JLabel display = (JLabel) jvw.getComponent(0);

        // Definindo o cliente que deve ser monitorado

        ict.setDisplay(display);
        ict.setIpClient(ip);
        ict.setPort(portFeedBack);
        ict.start();
    }//GEN-LAST:event_jtpClientsStateChanged

    private void jbtBlockClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBlockClientActionPerformed
        // TODO add your handling code here:

        String clis = Main.properties.getProperty("clients");
        String[] cliets = clis.split(",");
        for (int i = 0; i < cliets.length; i++) {
            String ip = cliets[i];
            //jbtBlockClient
            // 2 bloqueia e 5 desbloqueia
            int option = jbtBlockClient.isSelected() ? 2 : 5;
            ExecuteCommandClient ecc = new ExecuteCommandClient(ip, 14900,
                    option);
            ecc.start();
        }




    }//GEN-LAST:event_jbtBlockClientActionPerformed

    private void jmiBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiBlockActionPerformed
        // TODO add your handling code here:\
        jbtBlockClient.setSelected(!jbtBlockClient.isSelected());
        jbtBlockClientActionPerformed(evt);
    }//GEN-LAST:event_jmiBlockActionPerformed

    private void jbtnCloseFrmClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseFrmClientActionPerformed
        // TODO add your handling code here:
        String clis = Main.properties.getProperty("clients");
        String[] cliets = clis.split(",");
        for (int i = 0; i < cliets.length; i++) {
            String ip = cliets[i];
            //jbtBlockClient
            // 2 bloqueia e 5 desbloqueia
            int option = 7;// Fechar Frame no Cliente

            ExecuteCommandClient ecc = new ExecuteCommandClient(ip, portFeedBack,
                    option);
            ecc.start();
        }
    }//GEN-LAST:event_jbtnCloseFrmClientActionPerformed

private void jtbLigaDesligaRedeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbLigaDesligaRedeActionPerformed
// TODO add your handling code here:
    int option = 8;// Desliga a rede

    boolean run = true;
    if (jtbLigaDesligaRede.isSelected()) {
        System.out.println("Rede desligando");
        option = 8;
        run = true;
        if (bnc == null) {
            bnc = new BlockNetworkCliente();
            bnc.setRun(run);
            bnc.setPortFeedBack(portFeedBack);
            bnc.setOption(option);
            bnc.start();
        }
    } else {
        run = false;
        if (bnc != null) {
            bnc.setRun(run);
            bnc = null;
        }
        System.out.println("Rede ligando");
        option = 9; // liga a rede

        String clis = Main.properties.getProperty("clients");
        String[] cliets = clis.split(",");
        for (int i = 0; i < cliets.length; i++) {
            String ip = cliets[i];
            // 8 desliga a rede e 9 liga a rede
            ExecuteCommandClient ecc = new ExecuteCommandClient(ip, getPortFeedBack(),
                    option);
            ecc.start();
        }

    }




}//GEN-LAST:event_jtbLigaDesligaRedeActionPerformed

private void jtbDesligarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbDesligarClienteActionPerformed
// TODO add your handling code here: 
    int op = JOptionPane.showConfirmDialog(null, "Confirm Shutdown All Clients?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (JOptionPane.YES_OPTION == op) {
        int option = 10;// Desliga o cliente

        String clis = Main.properties.getProperty("clients");
        String[] cliets = clis.split(",");
        for (int i = 0; i < cliets.length; i++) {
            String ip = cliets[i];
            // 10 desliga o cliente
            ExecuteCommandClient ecc = new ExecuteCommandClient(ip, portFeedBack,
                    option);
            ecc.start();
        }
    }
    jtbDesligarCliente.setSelected(false);

}//GEN-LAST:event_jtbDesligarClienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrmManager().setVisible(true);
            }
        });
    }

    public javax.swing.JList getJltMachine() {
        return jltMachine;
    }

    public void setJltMachine(javax.swing.JList jltMachine) {
        this.jltMachine = jltMachine;
    }

    public int getPortFeedBack() {
        return portFeedBack;
    }

    public void setPortFeedBack(int portFeedBack) {
        this.portFeedBack = portFeedBack;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jbtBlockClient;
    private javax.swing.JButton jbtCaptureScreen;
    private javax.swing.JButton jbtExit;
    private javax.swing.JButton jbtTools;
    private javax.swing.JButton jbtnCloseFrmClient;
    private javax.swing.JList jltMachine;
    private javax.swing.JMenuItem jmiBlock;
    private javax.swing.JMenuItem jmiConfigute;
    private javax.swing.JMenuItem jmiTransmit;
    private javax.swing.JMenu jmnTools;
    private javax.swing.JPanel jplCenter;
    private javax.swing.JPanel jplLeft;
    private javax.swing.JPanel jplTop;
    private javax.swing.JSplitPane jspCenter;
    private javax.swing.JToggleButton jtbDesligarCliente;
    private javax.swing.JToggleButton jtbDominate;
    private javax.swing.JToggleButton jtbLigaDesligaRede;
    private javax.swing.JToggleButton jtbObservation;
    private javax.swing.JToggleButton jtbTransmission;
    private javax.swing.JTabbedPane jtpClients;
    // End of variables declaration//GEN-END:variables
    //private javax.swing.JTabbedPane jtpClients;

    public Server getServer() {
        return server;
    }

    public void setServer(Server server) {
        this.server = server;
    }

    public ServerGroup getSg() {
        return sg;
    }

    public void setSg(ServerGroup sg) {
        this.sg = sg;
    }
}
